--- A collection of reusable Cairo patterns
local color      = require( "gears.color"    )
local surface    = require( "gears.surface"  )
local cairo      = require( "lgi"            ).cairo

local blind_pat = {}

--- Create a 45 degree stipped pattern
-- @arg col1 the first color
-- @arg col2 the second color
-- @arg the pattern height (in pixel)
-- @arg horizontal_repetition number of pixels between lines (default = 4)
-- @arg right to left (default = false)
function blind_pat.flat_grad(col1,col2,height,horizontal_repetition,rtl)
    local w = horizontal_repetition or 4
    -- The lines need to be aligned by muliples of their horizontal repetition
    local rep = math.floor(height/w)
    local multiple = w*( rep + 1)

    local img = cairo.ImageSurface.create(cairo.Format.ARGB32, w, multiple)
    local cr  = cairo.Context(img)
    cr:set_source(col1)
    cr:paint()
    cr:set_source(col2)
    cr:set_antialias(cairo.ANTIALIAS_NONE)
    cr:set_line_width(1)
    for i=0,rep do
        cr:move_to(0,i*4)
        cr:line_to(4,(i+1)*4)
        cr:stroke()
    end
    return img,cr
end

--- The 3D version of flat_grad
-- @arg col1 the first color
-- @arg col2 the second color (optional, will be autogenerated)
-- @arg horizontal_repetition number of pixels between lines (default = 4)
-- @arg right to left (default = false)
function blind_pat.striped_grad(col,col2,height,horizontal_repetition,rtl)
    if not col then return end
    local pat3,pat4 = color(col),col2 and color(col2)

    -- If there is only one color, then build the second one
    if not col2 then
        local s,r,g,b,a = pat3:get_rgba()

        pat3 = cairo.Pattern.create_rgb((r-0.1)/3,(g-0.1)/3,(b-0.1)/3)
        pat4 = cairo.Pattern.create_rgb((r-0.1)*1.2,(g-0.1)*1.2,(b-0.1)*1.2)
    end

    local img,cr = blind_pat.flat_grad(pat3,pat4,height)

    local c1,c2 = "#ffffff","#77777755"
    local mixgrad = { type = "linear", from = { 0, 0 }, to = { 0, 16 }, stops = { { 0.2, c1 }, { 1, c2 }}}
    local grabpat = color(mixgrad)
    cr:set_source(grabpat)
    cr:set_operator(cairo.Operator.OVERLAY)
    cr:paint_with_alpha(1)
    pat = cairo.Pattern.create_for_surface(img)
    pat:set_extend(cairo.Extend.REPEAT)
    return pat
end

return blind_pat